- name: Check if Nexus container exists
  community.docker.docker_container_info:
    name: "{{ nexus_container_name }}"
  register: nexus_container_status
  failed_when: false

- name: Stop Nexus container if it exists
  community.docker.docker_container:
    name: "{{ nexus_container_name }}"
    state: stopped
    image: "sonatype/nexus3:{{ nexus_version }}"
  when: nexus_container_status.container is defined

- name: Remove Nexus container if it exists
  community.docker.docker_container:
    name: "{{ nexus_container_name }}"
    state: absent
    image: "sonatype/nexus3:{{ nexus_version }}"
  when: nexus_container_status.container is defined

- name: Check if Nexus volume exists
  community.docker.docker_volume_info:
    name: "{{ nexus_volume_name }}"
  register: nexus_volume_status
  failed_when: false

- name: Create Nexus Docker volume if not exists
  community.docker.docker_volume:
    name: "{{ nexus_volume_name }}"
  when: nexus_volume_status.volume is not defined

- name: Deploy Nexus container
  community.docker.docker_container:
    name: "{{ nexus_container_name }}"
    image: "sonatype/nexus3:{{ nexus_version }}"
    ports:
      - "{{ nexus_http_port }}:8081"
    volumes:
      - "{{ nexus_volume_name }}:/nexus-data"
    env:
      INSTALL4J_ADD_VM_PARAMS: "-Xms1200m -Xmx1200m"
    restart_policy: always
    state: started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 20

- name: Nexus role completed
  ansible.builtin.meta: flush_handlers
